import java.util.*;
import java.io.*;

class Main {
    static int[][] graph;
    static boolean visit[];
    static int N,j,plus,total;
    static int[] comparelist; 
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        HashMap<Integer,Integer> finallist = new HashMap<>();
        N = sc.nextInt();
        int M = sc.nextInt();
        sc.nextLine();
        graph = new int[N+1][N+1];
        visit = new boolean[N+1];
        comparelist = new int[N+1];
        
        for(int i =0;i<M;i++){
            String str = sc.nextLine();
            String word[] = str.split(" ");
            int a = Integer.parseInt(word[0]);
            int b = Integer.parseInt(word[1]);
            
            graph[a][b] = 1;
            graph[b][a] = 1;
            }
            
        for(j = 1;j<N+1;j++){
            plus = 0;
            total = 0;
            q.add(j);
            bfs(j);
            finallist.put(j,total);
            
        }
        
        
    }
    
    
    private void bfs(int n){
        visit[n] = true;
        plus = plus + 1;
        
        
        int start = q.poll();
            for(int k = 1;k<N+1;k++){
                if(graph[start][k] == 1 && visit[k] = false){
                    q.add(k);
                    total = total + plus;
                    visit[k] = true;
                }
            }
        
    }
}











-------------------------------------------------------------------------------


import java.util.*;
import java.io.*;

class Main {
    static int[][] graph;
    static boolean visit[];
    static int M,N,j,plus,total;
    static int[] comparelist; 
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        HashMap<Integer,Integer> finallist = new HashMap<>();
        N = sc.nextInt();
        M = sc.nextInt();
        sc.nextLine();
        graph = new int[N+1][N+1];
        visit = new boolean[N+1];
        comparelist = new int[N+1];
        
        for(int h = 1;h<M+1;h++){
            for(int y = 1;y<M+1;y++){
                if(h==y){
                    graph[h][y] = 0;
                }else{
                graph[h][y] = 10000;
                }
            }
        }
        
        for(int i =0;i<M;i++){
            String str = sc.nextLine();
            String word[] = str.split(" ");
            int a = Integer.parseInt(word[0]);
            int b = Integer.parseInt(word[1]);
            
            graph[a][b] = 1;
            graph[b][a] = 1;
            }
            
        
     floyd(graph);
     
     for(int ab = 1;ab<M+1;ab++){
         for(int abc = 1;abc<M+1;abc++){
             
         }
     }
     
     
        
        
    }
    
    
    
    private void floyd(int[][] array){
        for(int q = 1;q<M+1;q++){
            for(int w = 1;w<M+1;w++){
                for(int e = 1;e<M+1;e++){
                    array[w][e] = Math.min(array[w][e],array[w][q]+array[q][e]);
                    
                }
            }
        }
    }
}
