import java.util.Scanner;
import java.lang.Math;


class Main {
    static int dp[][];
    public static void main(String[] args) {
        Scanne sc = new Scanner(System.in);
        int N = Integer.parseInt(sc.nextLine());
        dp[][] = new int[N+1][2];
        for(int j = 0;j<N;j++){
            String str = sc.nextLine();
            String word[] = str.split(" ");
            dp[j][0] = Integer.parseInt(word[0]);
            dp[j][1] = Integer.parseInt(word[1]);
            dp[j][2] = Integer.parseInt(word[2]);
        }
        
    dpdp(N);
    int abc = Math.min(Math.min(numfinal1,numfinal2),numfinal3);
    System.out.println(abc);
    }
    
    
    
    
    static void dpdp(int n){
    while(true){
        int road = 0;
        int array = 0;
        int chance = 0;
        static int numfinal1 = 0;
        static int numfinal2 = 0;
        static int numfinal3 = 0;
    if(chance!==n){
        if(road==0){
         if(dp[array][1]<dp[array][2]){
         numfinal1 = numfinal1 + dp[array][1];
         road = 1;
        }else{
         numfinal1 = numfinal1 + dp[array][2]; 
         road = 2;
        }
    chance = chance + 1;    
    }
        if(road==1){
         if(dp[array][0]<dp[array][2]){
         numfinal2 = numfinal2 + dp[array][0];
         road = 0;
        }else{
         numfinal2 = numfinal2 + dp[array][2]; 
         road = 2;
        }
        chance = chance + 1;
    }
    
        if(road==2){
         if(dp[array][0]<dp[array][1]){
         numfinal3 = numfinal3 + dp[array][0];
         road = 0;
        }else{
         numfinal3 = numfinal3 + dp[array][1]; 
         road = 1;
        }
        chance = chance + 1;
    }
    
    }else{
        break;
    } 
    }
    
    
    }
}



============================================================================================================================================
import java.util.Scanner;

class Main {
    static int dp[][];  // dp 배열을 정의하여 값을 저장
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = Integer.parseInt(sc.nextLine());
        
        dp = new int[N][3];  // 두 번째 차원을 3으로 설정 (세 가지 값을 저장)
        
        // 입력을 받아 dp 배열에 저장
        for(int j = 0; j < N; j++) {
            String str = sc.nextLine();
            String word[] = str.split(" ");
            dp[j][0] = Integer.parseInt(word[0]);
            dp[j][1] = Integer.parseInt(word[1]);
            dp[j][2] = Integer.parseInt(word[2]);
        }
        
        dpdp(N);  // dpdp 메서드 호출
        
        // numfinal1, numfinal2, numfinal3 중 최소값을 출력
        int abc = Math.min(Math.min(lista[0], lista[1]), lista[2]);
        System.out.println(abc);
    }
    
    // numfinal1, numfinal2, numfinal3를 메서드 밖에서 선언
    static int numfinal1 = 0, numfinal2 = 0, numfinal3 = 0;
    static int[] lista;
    
    static void dpdp(int n) {
        lista = new int[3];
        int chance = 1;
        int road = 0;  // 시작은 road 0
        int array = 1; // dp 배열의 인덱스
        numfinal1 = dp[0][0];
        numfinal2 = dp[0][1];
        numfinal3 = dp[0][2];
        
        // 모든 단계를 끝낼 때까지 반복
    for(int j =0;j<3;j++){
        road = j;
        int num = dp[0][j];
        while (chance < n) {
            if (road == 0) {
                // road 0에서 dp[array][1]과 dp[array][2] 중 작은 값을 선택
                if (dp[array][1] < dp[array][2]) {
                    num += dp[array][1];
                    road = 1;  // 다음에는 road 1로 변경
                } else {
                    num += dp[array][2];
                    road = 2;  // 다음에는 road 2로 변경
                }
            } else if (road == 1) {
                // road 1에서 dp[array][0]과 dp[array][2] 중 작은 값을 선택
                if (dp[array][0] < dp[array][2]) {
                    num += dp[array][0];
                    road = 0;  // 다음에는 road 0으로 변경
                } else {
                    num += dp[array][2];
                    road = 2;  // 다음에는 road 2로 변경
                }
            } else if (road == 2) {
                // road 2에서 dp[array][0]과 dp[array][1] 중 작은 값을 선택
                if (dp[array][0] < dp[array][1]) {
                    num += dp[array][0];
                    road = 0;  // 다음에는 road 0으로 변경
                } else {
                    num += dp[array][1];
                    road = 1;  // 다음에는 road 1로 변경
                }
            }
            
            chance++; // chance를 증가시켜서 다음 단계로 이동
            array++;  // dp 배열에서 다음 인덱스로 이동
        }
        lista[j] = num;
    }
    }
}

=====================================================================================================

import java.util.Scanner;

class Main {
    static int dp[][];  // dp 배열을 정의하여 값을 저장
    static int lista[]; // 결과를 저장할 배열
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = Integer.parseInt(sc.nextLine());
        
        dp = new int[N][3];  // 두 번째 차원을 3으로 설정 (세 가지 값을 저장)
        
        // 입력을 받아 dp 배열에 저장
        for(int j = 0; j < N; j++) {
            String str = sc.nextLine();
            String word[] = str.split(" ");
            dp[j][0] = Integer.parseInt(word[0]);
            dp[j][1] = Integer.parseInt(word[1]);
            dp[j][2] = Integer.parseInt(word[2]);
        }
        
        lista = new int[3];  // 결과를 저장할 배열을 크기 3으로 할당
        dpdp(N);  // dpdp 메서드 호출
        
        int abc = Math.min(Math.min(lista[0], lista[1]), lista[2]);
        System.out.println(abc);
    }
    
    static void dpdp(int n) {
        for (int j = 0; j < 3; j++) {
            int num = dp[0][j]; // 첫 번째 집에서 j번째 색 선택
            int road = j;  // 현재 도로를 설정 (0, 1, 2)
            
            // 각 단계별로 선택하여 최소값을 계산
            for (int i = 1; i < n; i++) {
                if (road == 0) {
                    // road 0에서 dp[i][1]과 dp[i][2] 중 작은 값을 선택
                    if (dp[i][1] < dp[i][2]) {
                        num += dp[i][1];
                        road = 1;
                    } else {
                        num += dp[i][2];
                        road = 2;
                    }
                } else if (road == 1) {
                    // road 1에서 dp[i][0]과 dp[i][2] 중 작은 값을 선택
                    if (dp[i][0] < dp[i][2]) {
                        num += dp[i][0];
                        road = 0;
                    } else {
                        num += dp[i][2];
                        road = 2;
                    }
                } else if (road == 2) {
                    // road 2에서 dp[i][0]과 dp[i][1] 중 작은 값을 선택
                    if (dp[i][0] < dp[i][1]) {
                        num += dp[i][0];
                        road = 0;
                    } else {
                        num += dp[i][1];
                        road = 1;
                    }
                }
            }
            lista[j] = num;  // j번째 색으로 시작한 최소 비용을 저장
        }
    }
}




================================================================================================

import java.util.Scanner;

class Main {
    
    static int[][] dp;
    static int[][] dpfinal;
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = Integer.parseInt(sc.nextLine());
        dp = new int[N][3];
        dpfinal = new int[N][3];
        
        for(int j = 0;j<N;j++){
            String str = sc.nextLine();
            String word[] = str.split(" ");
            dp[j][0] = Integer.parseInt(word[0]);
            dp[j][1] = Integer.parseInt(word[1]);
            dp[j][2] = Integer.parseInt(word[2]);
        }
        dpfinal[0][0] = dp[0][0];
        dpfinal[0][1] = dp[0][1];
        dpfinal[0][2] = dp[0][2];
        
        
        dpdp(N);
        int u = Math.min((dpfinal[N-1][2]),Math.min(dpfinal[N-1][0],dpfinal[N-1][1]));
        System.out.println(u);
    }
    
    
    static void dpdp(int n){
        for(int i = 1;i<n;i++){
            dpfinal[i][0] = Math.min(dpfinal[i-1][1],dpfinal[i-1][2]) + dp[i][0];
            dpfinal[i][1] = Math.min(dpfinal[i-1][0],dpfinal[i-1][2]) + dp[i][1];
            dpfinal[i][2] = Math.min(dpfinal[i-1][0],dpfinal[i-1][1]) + dp[i][2];
        }   
    }
}
