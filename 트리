import java.util.Queue;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.LinkedList;

class Main {
    static int graph[][],N;
    static boolean visit[];
    static Queue<Integer> q = new LinkedList<>();
    static ArrayList<Integer> finallist = new ArrayList<>();
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> result = new ArrayList<>();
        int topnode = 0;
        int N = sc.nextInt();                        ----- 중복선언 조심!
        sc.nextLine();
        graph = new int[N][N];
        visit = new boolean[N];
        int resultint = 0;
        
        
        String str = sc.nextLine();
        String word[] = str.split(" ");
        for(int w = 0;w<N;w++){
            if(Integer.parseInt(word[w])==-1){
                topnode = w;
            }else{
                graph[Integer.parseInt(word[w])][w] = 1;
            }
        }
        
        int minus = Integer.parseInt(sc.nextLine());
        
       bfs(topnode);
       
       for(int ad : finallist){
           result.add(ad);
           resultint = resultint + 1;
       }
       
       finallist.clear();
       visit = new boolean[N];
       bfs(minus);
       
        for(int adsdf : finallist){
           resultint = resultint - 1;
       }
       
        System.out.println(resultint);
    }
    
    
    private static void bfs(int n){
        q.add(n);
        visit[n] = true;
        
        while(!q.isEmpty()){
            int abcd = q.poll();
            int count = 0;
            for(int j = 0;j<N;j++){
                if(graph[abcd][j] == 1 && visit[j] == false){
                    count = count + 1;
                    q.add(j);
                    visit[j] = true;
                }
            }
            if(count == 0){
                finallist.add(abcd);
                System.out.println(abcd);
            }
        }
    }
}


---------------------------------------------------------------------


import java.util.Queue;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.LinkedList;

class Main {
    static int graph[][], N;
    static boolean visit[];
    static Queue<Integer> q = new LinkedList<>();
    static ArrayList<Integer> finallist = new ArrayList<>();
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        N = sc.nextInt();  // 정점의 개수
        sc.nextLine();  // 개행 문자 처리
        
        graph = new int[N][N];  // 그래프 초기화
        visit = new boolean[N];  // 방문 여부 초기화
        
        int topnode = -1;
        
        String str = sc.nextLine();  // 부모 노드들에 대한 입력
        String[] word = str.split(" ");
        
        // 각 노드의 부모 노드 정보를 그래프에 반영
        for (int w = 0; w < N; w++) {
            int parent = Integer.parseInt(word[w]);
            if (parent == -1) {
                topnode = w;  // topnode를 찾는다
            } else {
                graph[parent][w] = 1;  // 부모 노드와 자식 노드를 연결
            }
        }
        
        // BFS 시작
        bfs(topnode);
    }
    
    static void bfs(int n) {
        q.add(n);  // 시작 노드를 큐에 넣고
        visit[n] = true;  // 방문 처리
        
        while (!q.isEmpty()) {
            int abcd = q.poll();  // 큐에서 하나씩 꺼내서 탐색
            
            // 현재 노드와 연결된 노드들 탐색
            for (int j = 0; j < N; j++) {
                if (graph[abcd][j] == 1 && !visit[j]) {  // 연결되어 있고 아직 방문하지 않았다면
                    q.add(j);  // 큐에 넣고
                    visit[j] = true;  // 방문 처리
                    System.out.println(j);  // 탐색한 노드 출력
                }
            }
            
            // 만약 연결된 자식 노드가 없으면 최종 노드 목록에 추가
            boolean hasChild = false;
            for (int j = 0; j < N; j++) {
                if (graph[abcd][j] == 1) {
                    hasChild = true;
                    break;
                }
            }
            if (!hasChild) {
                finallist.add(abcd);  // 자식이 없는 노드를 최종 목록에 추가
            }
        }
        
        // 최종 노드 출력
        System.out.println("Final nodes (no children): " + finallist);
    }
}







--------------------------------------------------------- 완성본
import java.util.Queue;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.LinkedList;

class Main {
    static int graph[][],N,count1;
    static boolean visit[];
    static Queue<Integer> q = new LinkedList<>();
    static ArrayList<Integer> finallist = new ArrayList<>();
    static ArrayList<Integer> dellist = new ArrayList<>();
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> result = new ArrayList<>();
        int topnode = -1;
        N = sc.nextInt();
        sc.nextLine();
        graph = new int[N][N];
        visit = new boolean[N];
        int resultint = 0;
        
        
        String str = sc.nextLine();
        String word[] = str.split(" ");
        for(int w = 0;w<N;w++){
            int check = Integer.parseInt(word[w]);
            if(check==-1){
                topnode = w;
            }else{
                graph[check][w] = 1;
            }
        }
        
        
        int minus = Integer.parseInt(sc.nextLine());
        
       bfs(topnode);
       
       visit = new boolean[N];
       bfsdel(minus);
       
       
         for(int qe = 0;qe<N;qe++){
               if(graph[qe][minus]==1){
                   graph[qe][minus]=0;
               }
           }
           
        for(int qp = 0;qp<count1;qp++){
           int delcheck = dellist.get(qp);
           int delcheck2 = dellist.get(qp+1);
           graph[delcheck][delcheck2] = 0;
           
        }
       
       
      finallist.clear();
      visit = new boolean[N];       
      bfs(topnode);
      
      for(int qwerf : finallist){
          resultint = resultint + 1;
      }
      if(minus == topnode){
          System.out.println("0");
      }else{
      System.out.println(resultint);
        }
    }
    
    
    private static void bfs(int n){
        q.add(n);
        visit[n] = true;
        
        while(!q.isEmpty()){
            int abcd = q.poll();
            int count = 0;
            for(int j = 0;j<N;j++){
                if(graph[abcd][j] == 1 && visit[j] == false){
                    count = count + 1;
                    q.add(j);
                    visit[j] = true;
                }
            }
            if(count == 0){
                finallist.add(abcd);
            }
        }
    }
    
        private static void bfsdel(int n){
        q.add(n);
        visit[n] = true;
        count1 = 0;
        dellist.add(n);
        
        while(!q.isEmpty()){
            int abcde = q.poll();
            for(int j = 0;j<N;j++){
                if(graph[abcde][j] == 1 && visit[j] == false){
                    count1 = count1 + 1;
                    q.add(j);
                    dellist.add(j);
                    visit[j] = true;
                }
            }
        }
    }
}
