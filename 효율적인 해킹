import java.util.Scanner;
import java.util.ArrayList;

class Main {
    static int N;
    static int chance;
    static boolean visit[];
    static int[][] graph;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> finalist = new ArrayList<>();
        ArrayList<Integer> resulta = new ArrayList<>();
        String str = sc.nextLine();
        String[] word = str.split(" ");
        N = Integer.parseInt(word[0]); // 전역 변수 N에 값을 저장
        int M = Integer.parseInt(word[1]);
        graph = new int[N + 1][N + 1];
        visit = new boolean[N + 1]; // 전역 변수 visit 초기화

        // 그래프 입력
        for (int i = 0; i < M; i++) {
            String strr = sc.nextLine();
            String word2[] = strr.split(" ");
            int node1 = Integer.parseInt(word2[0]);
            int node2 = Integer.parseInt(word2[1]);
            graph[node1][node2] = 1;
        }

        finalist.add(0);
        for (int j = 1; j < N + 1; j++) {
            chance = 0;
            visit = new boolean[N + 1]; // 방문 배열 초기화
            dfs(j);
            if (chance > finalist.get(0)) {
                finalist.clear();
                resulta.clear();
                finalist.add(chance);
                resulta.add(j);
            } else if (chance == finalist.get(0)) {
                resulta.add(j);
            }
        }

        // 결과 출력
        for (Integer strr : resulta) {
            System.out.print(strr + " ");
        }
    }

    static void dfs(int n) {
        visit[n] = true;
        for (int u = 1; u < N + 1; u++) {
            if (!visit[u] && graph[u][n] == 1) {
                chance++;
                dfs(u);
            }
        }
    }
}


----------------------------------------------------------------------------------------------


import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;

class Main {
    static int N;
    static int chance;
    static boolean visit[];
    static int[][] graph;
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> finalist = new ArrayList<>();
        ArrayList<Integer> resulta = new ArrayList<>();
        String str = sc.nextLine();
        String[] word = str.split(" ");
        int N = Integer.parseInt(word[0]);
        int M = Integer.parseInt(word[1]);
        graph = new int[N+1][N+1];
        for(int i = 0;i<M;i++){
            String strr = sc.nextLine();
            String word2[] = strr.split(" ");
            int node1 = Integer.parseInt(word2[0]);
            int node2 = Integer.parseInt(word2[1]);
            graph[node1][node2] = 1;
        }
        
        finalist.add(0);
        for(int j = 1;j<N+1;j++){
            chance = 0;
            visit = new boolean[N+1];
            dfs(j);
            if(chance>finalist.get(0)){
                finalist.clear();
                resulta.clear();
                finalist.add(chance);
                resulta.add(j);
            }else if(chance==finalist.get(0)){
                resulta.add(j);
            }
            
        }
        
        for(Integer strr : resulta){
            System.out.print(strr+" ");
        }
        
        
            
    }        
        
        
            
    
    

static void dfs(int n){
        visit[n] = true;
        for(int u = 1;u<N+1;u++){
            if(visit[u] == false && graph[u][n] == 1){
                chance = chance + 1;
                dfs(u);
                System.out.println("visit"+u);
            }
        }
        
    }
}


------------------------------------------------------------------------------------

import java.io.*;
import java.util.*;

class Main {
    static int N;
    static int chance;
    static boolean visit[];
    static ArrayList<Integer>[] graph;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        Queue<Integer> q = new LinkedList<>();
        ArrayList<Integer> finalist = new ArrayList<>();
        ArrayList<Integer> resulta = new ArrayList<>();
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken()); // 전역 변수 N에 값을 저장
        int M = Integer.parseInt(st.nextToken());
        graph = new ArrayList[N + 1];
        
        
        for (int i = 1; i <= N; i++) {
            graph[i] = new ArrayList<>();
        }
        
        
        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());   
            int b = Integer.parseInt(st.nextToken()); 
            graph[b].add(a);
        }

        finalist.add(0);
        for (int j = 1; j < N + 1; j++) {
            chance = 0;
            visit = new boolean[N + 1]; // 방문 배열 초기화
            visit[j] = true;
            q.add(j);
        
            while(!q.isEmpty()){
                int start = q.poll();
                for(int abcd : graph[start]){
                    if(!visit[abcd]){
                        chance++;
                        q.add(abcd);
                        visit[abcd] = true;
            }
        }
    }
            if (chance > finalist.get(0)) {
                finalist.clear();
                resulta.clear();
                finalist.add(chance);
                resulta.add(j);
            } else if (chance == finalist.get(0)) {
                resulta.add(j);
            }
        }

        // 결과 출력
        for (Integer strr : resulta) {
            bw.write(strr+" ");
        }
        bw.close();
    }
} 




------------------------------정답----------------------------------

Scanner 쓰지말기..?

import java.io.*;
import java.util.*;

class Main {
    static int N;
    static int chance;
    static boolean visit[];
    static ArrayList<Integer>[] graph;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        Queue<Integer> q = new LinkedList<>();
        ArrayList<Integer> finalist = new ArrayList<>();
        ArrayList<Integer> resulta = new ArrayList<>();
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken()); // 전역 변수 N에 값을 저장
        int M = Integer.parseInt(st.nextToken());
        graph = new ArrayList[N + 1];
        
        
        for (int i = 1; i <= N; i++) {
            graph[i] = new ArrayList<>();
        }
        
        
        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());   
            int b = Integer.parseInt(st.nextToken()); 
            graph[b].add(a);
        }

        finalist.add(0);
        
        
        for (int j = 1; j < N + 1; j++) {
            chance = 0;
            visit = new boolean[N + 1]; // 방문 배열 초기화
            dfs(j);


            if (chance > finalist.get(0)) {
                finalist.clear();
                resulta.clear();
                finalist.add(chance);
                resulta.add(j);
            } else if (chance == finalist.get(0)) {
                resulta.add(j);
            }
        }

        // 결과 출력
        for (Integer strr : resulta) {
            bw.write(strr+" ");
        }
        bw.close();
    }
    
    
    static void dfs(int n){
        visit[n] = true;
        for(int abcd : graph[n]){
            if(!visit[abcd]){
                chance++;
                dfs(abcd);
            }
        }
    }
} 
